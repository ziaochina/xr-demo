'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _parseName = require('./parseName');

var _parseName2 = _interopRequireDefault(_parseName);

var _appFactory = require('./appFactory');

var _appFactory2 = _interopRequireDefault(_appFactory);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (actionInjections, reducerInjections) {
	return function (store) {
		return function (next) {
			return function (action) {
				var getState = store.getState,
				    dispatch = store.dispatch;


				if (typeof action === 'function') {
					var _action = action(),
					    fullName = _action.fullName,
					    name = _action.name,
					    query = _action.query,
					    params = _action.params,
					    actionCreator = _action.actionCreator,
					    args = _action.args,
					    reducer = _action.reducer;

					var reduce = function reduce(type) {
						for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
							args[_key - 1] = arguments[_key];
						}

						dispatch({
							type: '@@reduce',
							payload: {
								fullName: fullName,
								name: name,
								query: query,
								type: type,
								reducer: reducer,
								payload: args,
								reducerInjections: reducerInjections
							}
						});
					};

					var getStateByApp = function getStateByApp() {
						return query !== '' ? getState().getIn([name, query]) : getState().get(name);
					};
					var injections = (0, _extends3.default)({
						currentApp: {
							fullName: fullName,
							name: name,
							query: query,
							params: params
						},
						store: store,
						reduce: reduce,
						getState: getStateByApp
					}, actionInjections);
					var realAction = actionCreator.apply(undefined, (0, _toConsumableArray3.default)(args).concat([injections]));

					if (typeof realAction === 'function') {
						realAction(injections);
					}
				} else if (action.type && action.type == '@@loadApp') {
					var _fullName = action.payload.fullName,
					    parsedName = (0, _parseName2.default)(_fullName),
					    appInfo = _appFactory2.default.getApp(parsedName.name);

					appInfo.load(function (component, action, reducer) {
						return next({
							type: '@@loadAppReal',
							payload: {
								fullName: _fullName,
								appInfo: appInfo,
								component: component,
								action: action,
								reducer: reducer
							}
						});
					});
				} else {
					return next(action);
				}
			};
		};
	};
};

module.exports = exports['default'];